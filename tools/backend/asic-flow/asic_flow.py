#!/usr/bin/env python3
"""
ASIC Flow Manager for Dynamatic
Integrates with LibreLane for complete ASIC synthesis flow
"""

import os
import sys
import subprocess
import json
import argparse
from pathlib import Path

class ASICFlowManager:
    def __init__(self, design_name, pdk="sky130", library="sky130_fd_sc_hd"):
        self.design_name = design_name
        self.pdk = pdk
        self.library = library
        self.output_dir = f"asic_output_{design_name}"
        
    def create_yosys_script(self, verilog_files):
        """Create Yosys synthesis script for ASIC synthesis"""
        script = f"""# ASIC Synthesis Script for {self.design_name}
# Generated by Dynamatic ASIC Flow Manager

# Read design files
"""
        for vfile in verilog_files:
            script += f"read_verilog {vfile}\n"
            
        script += f"""
# Hierarchy check
hierarchy -check -top {self.design_name}

# High-level synthesis
proc; opt; fsm; opt; memory; opt

# Technology mapping
techmap; opt

# Map to standard cells
dfflibmap -liberty $::env(PDK_ROOT)/{self.pdk}/libs.ref/{self.library}/liberty/{self.library}__tt_025C_1v80.lib
abc -liberty $::env(PDK_ROOT)/{self.pdk}/libs.ref/{self.library}/liberty/{self.library}__tt_025C_1v80.lib

# Write synthesized netlist
write_verilog -noattr {self.output_dir}/{self.design_name}_synthesized.v
write_liberty {self.output_dir}/{self.design_name}.lib

# Write statistics
stat -liberty $::env(PDK_ROOT)/{self.pdk}/libs.ref/{self.library}/liberty/{self.library}__tt_025C_1v80.lib
"""
        return script
        
    def create_librelane_config(self, verilog_files):
        """Create LibreLane configuration"""
        config = f"""# LibreLane Configuration for {self.design_name}
# Generated by Dynamatic ASIC Flow Manager

set ::env(DESIGN_NAME) "{self.design_name}"
set ::env(VERILOG_FILES) "{' '.join(verilog_files)}"
set ::env(PDK) "{self.pdk}"
set ::env(STD_CELL_LIBRARY) "{self.library}"

# Design configuration
set ::env(CLOCK_PERIOD) "10.0"
set ::env(CLOCK_PORT) "clock"
set ::env(CLOCK_NET) "clock"

# Floorplan configuration
set ::env(DIE_AREA) "0 0 1000 1000"
set ::env(PLACE_SITE) "unithd"
set ::env(PLACE_DENSITY) "0.6"

# Synthesis configuration
set ::env(SYNTH_STRATEGY) "DELAY 0"
set ::env(SYNTH_MAX_FANOUT) "5"

# Place and Route configuration
set ::env(PLACE_SITE) "unithd"
set ::env(PLACE_DENSITY) "0.6"
set ::env(ROUTING_STRATEGY) "2"

# Timing configuration
set ::env(STA_WRITE_LIB) "1"
set ::env(STA_USE_ARC_ENERGY) "1"

# Power configuration
set ::env(POWER_OPTIMIZATION) "1"

# Verification
set ::env(RUN_KLAYOUT_DRC) "1"
set ::env(RUN_KLAYOUT_XOR) "1"
"""
        return config
        
    def run_yosys_synthesis(self, verilog_files):
        """Run Yosys synthesis"""
        print(f"Running Yosys synthesis for {self.design_name}...")
        
        # Create output directory
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Create Yosys script
        yosys_script = self.create_yosys_script(verilog_files)
        script_file = f"{self.output_dir}/synthesize.tcl"
        
        with open(script_file, 'w') as f:
            f.write(yosys_script)
            
        # Run Yosys
        cmd = ["yosys", "-c", script_file]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"Yosys synthesis failed: {result.stderr}")
            return False
            
        print("Yosys synthesis completed successfully!")
        return True
        
    def run_librelane_flow(self, libreLane_path):
        """Run complete LibreLane flow"""
        if not libreLane_path:
            print("Error: LibreLane path not specified")
            return False
            
        print(f"Running LibreLane flow for {self.design_name}...")
        
        # Create LibreLane run script
        run_script = f"{self.output_dir}/run_librelane.sh"
        
        script_content = f"""#!/bin/bash
set -e

cd {self.output_dir}
export PDK_ROOT={libreLane_path}/pdks
export OPENLANE_ROOT={libreLane_path}
export OPENLANE_IMAGE_NAME=efabless/openlane:current
export CARAVEL_ROOT={libreLane_path}/caravel
export CARAVEL_LITE=1

# Run LibreLane flow
{libreLane_path}/flow.tcl -design {self.design_name} -tag dynamatic
"""
        
        with open(run_script, 'w') as f:
            f.write(script_content)
            
        # Make script executable
        os.chmod(run_script, 0o755)
        
        # Run LibreLane
        result = subprocess.run(["bash", run_script], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"LibreLane flow failed: {result.stderr}")
            return False
            
        print("LibreLane flow completed successfully!")
        return True
        
    def generate_reports(self):
        """Generate synthesis and implementation reports"""
        print("Generating reports...")
        
        reports = {
            "synthesis": f"{self.output_dir}/{self.design_name}_synthesized.v",
            "liberty": f"{self.output_dir}/{self.design_name}.lib",
            "librelane_log": f"{self.output_dir}/runs/dynamatic/logs",
            "final_gds": f"{self.output_dir}/runs/dynamatic/results/final/gds",
            "final_def": f"{self.output_dir}/runs/dynamatic/results/final/def"
        }
        
        print("Generated files:")
        for report_type, path in reports.items():
            if os.path.exists(path):
                print(f"  {report_type}: {path}")
            else:
                print(f"  {report_type}: Not found")
                
        return reports

def main():
    parser = argparse.ArgumentParser(description="Dynamatic ASIC Flow Manager")
    parser.add_argument("design_name", help="Name of the design")
    parser.add_argument("verilog_files", nargs="+", help="Input Verilog files")
    parser.add_argument("--pdk", default="sky130", help="Process Design Kit")
    parser.add_argument("--library", default="sky130_fd_sc_hd", help="Standard cell library")
    parser.add_argument("--librelane-path", help="Path to LibreLane installation")
    parser.add_argument("--run-librelane", action="store_true", help="Run complete LibreLane flow")
    parser.add_argument("--yosys-only", action="store_true", help="Run only Yosys synthesis")
    
    args = parser.parse_args()
    
    # Create ASIC flow manager
    flow_manager = ASICFlowManager(args.design_name, args.pdk, args.library)
    
    # Run Yosys synthesis
    if not flow_manager.run_yosys_synthesis(args.verilog_files):
        sys.exit(1)
        
    # Run LibreLane flow if requested
    if args.run_librelane and not args.yosys_only:
        if not flow_manager.run_librelane_flow(args.librelane_path):
            sys.exit(1)
            
    # Generate reports
    flow_manager.generate_reports()
    
    print(f"\nASIC flow completed for {args.design_name}!")
    print(f"Output directory: {flow_manager.output_dir}")

if __name__ == "__main__":
    main()
